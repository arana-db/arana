// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arana-db/arana/pkg/proto (interfaces: Sequence,SequenceManager)

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"

	proto "github.com/arana-db/arana/pkg/proto"
	gomock "github.com/golang/mock/gomock"
)

// MockSequence is a mock of Sequence interface.
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
}

// MockSequenceMockRecorder is the mock recorder for MockSequence.
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance.
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockSequence) Acquire(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Acquire indicates an expected call of Acquire.
func (mr *MockSequenceMockRecorder) Acquire(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockSequence)(nil).Acquire), arg0)
}

// Reset mocks base method.
func (m *MockSequence) Reset() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockSequenceMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockSequence)(nil).Reset))
}

// Update mocks base method.
func (m *MockSequence) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSequenceMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSequence)(nil).Update))
}

// MockSequenceManager is a mock of SequenceManager interface.
type MockSequenceManager struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceManagerMockRecorder
}

// MockSequenceManagerMockRecorder is the mock recorder for MockSequenceManager.
type MockSequenceManagerMockRecorder struct {
	mock *MockSequenceManager
}

// NewMockSequenceManager creates a new mock instance.
func NewMockSequenceManager(ctrl *gomock.Controller) *MockSequenceManager {
	mock := &MockSequenceManager{ctrl: ctrl}
	mock.recorder = &MockSequenceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequenceManager) EXPECT() *MockSequenceManagerMockRecorder {
	return m.recorder
}

// CreateSequence mocks base method.
func (m *MockSequenceManager) CreateSequence(arg0 context.Context, arg1, arg2 string, arg3 proto.SequenceConfig) (proto.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSequence", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(proto.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSequence indicates an expected call of CreateSequence.
func (mr *MockSequenceManagerMockRecorder) CreateSequence(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSequence", reflect.TypeOf((*MockSequenceManager)(nil).CreateSequence), arg0, arg1, arg2, arg3)
}

// GetSequence mocks base method.
func (m *MockSequenceManager) GetSequence(arg0 context.Context, arg1, arg2, arg3 string) (proto.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequence", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(proto.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequence indicates an expected call of GetSequence.
func (mr *MockSequenceManagerMockRecorder) GetSequence(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequence", reflect.TypeOf((*MockSequenceManager)(nil).GetSequence), arg0, arg1, arg2, arg3)
}
