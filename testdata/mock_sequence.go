// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dubbogo/arana/pkg/sequence (interfaces: Sequence,Sequencer)

// Package testdata is a generated GoMock package.
package testdata

import (
	context "context"
	reflect "reflect"
)

import (
	sequence "github.com/dubbogo/arana/pkg/proto"

	gomock "github.com/golang/mock/gomock"
)

// MockSequence is a mock of Sequence interface.
type MockSequence struct {
	ctrl     *gomock.Controller
	recorder *MockSequenceMockRecorder
}

// MockSequenceMockRecorder is the mock recorder for MockSequence.
type MockSequenceMockRecorder struct {
	mock *MockSequence
}

// NewMockSequence creates a new mock instance.
func NewMockSequence(ctrl *gomock.Controller) *MockSequence {
	mock := &MockSequence{ctrl: ctrl}
	mock.recorder = &MockSequenceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequence) EXPECT() *MockSequenceMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockSequence) Next(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockSequenceMockRecorder) Next(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockSequence)(nil).Next), arg0)
}

// MockSequencer is a mock of Sequencer interface.
type MockSequencer struct {
	ctrl     *gomock.Controller
	recorder *MockSequencerMockRecorder
}

// MockSequencerMockRecorder is the mock recorder for MockSequencer.
type MockSequencerMockRecorder struct {
	mock *MockSequencer
}

// NewMockSequencer creates a new mock instance.
func NewMockSequencer(ctrl *gomock.Controller) *MockSequencer {
	mock := &MockSequencer{ctrl: ctrl}
	mock.recorder = &MockSequencerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSequencer) EXPECT() *MockSequencerMockRecorder {
	return m.recorder
}

// Sequence mocks base method.
func (m *MockSequencer) Sequence(arg0 context.Context, arg1 string) (sequence.Sequence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sequence", arg0, arg1)
	ret0, _ := ret[0].(sequence.Sequence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sequence indicates an expected call of Sequence.
func (mr *MockSequencerMockRecorder) Sequence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sequence", reflect.TypeOf((*MockSequencer)(nil).Sequence), arg0, arg1)
}
