/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/arana-db/arana/pkg/proto/rule (interfaces: ShardComputer)

// Package testdata is a generated GoMock package.
package testdata

import (
	reflect "reflect"
)

import (
	gomock "github.com/golang/mock/gomock"
)

// MockShardComputer is a mock of ShardComputer interface.
type MockShardComputer struct {
	ctrl     *gomock.Controller
	recorder *MockShardComputerMockRecorder
}

// MockShardComputerMockRecorder is the mock recorder for MockShardComputer.
type MockShardComputerMockRecorder struct {
	mock *MockShardComputer
}

// NewMockShardComputer creates a new mock instance.
func NewMockShardComputer(ctrl *gomock.Controller) *MockShardComputer {
	mock := &MockShardComputer{ctrl: ctrl}
	mock.recorder = &MockShardComputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardComputer) EXPECT() *MockShardComputerMockRecorder {
	return m.recorder
}

// Compute mocks base method.
func (m *MockShardComputer) Compute(arg0 interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compute", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compute indicates an expected call of Compute.
func (mr *MockShardComputerMockRecorder) Compute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compute", reflect.TypeOf((*MockShardComputer)(nil).Compute), arg0)
}
