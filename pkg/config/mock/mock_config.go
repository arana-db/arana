// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	config "github.com/arana-db/arana/pkg/config"
	gomock "github.com/golang/mock/gomock"
)

// MockTenantOperator is a mock of TenantOperator interface.
type MockTenantOperator struct {
	ctrl     *gomock.Controller
	recorder *MockTenantOperatorMockRecorder
}

// MockTenantOperatorMockRecorder is the mock recorder for MockTenantOperator.
type MockTenantOperatorMockRecorder struct {
	mock *MockTenantOperator
}

// NewMockTenantOperator creates a new mock instance.
func NewMockTenantOperator(ctrl *gomock.Controller) *MockTenantOperator {
	mock := &MockTenantOperator{ctrl: ctrl}
	mock.recorder = &MockTenantOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantOperator) EXPECT() *MockTenantOperatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTenantOperator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTenantOperatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTenantOperator)(nil).Close))
}

// CreateTenant mocks base method.
func (m *MockTenantOperator) CreateTenant(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTenant indicates an expected call of CreateTenant.
func (mr *MockTenantOperatorMockRecorder) CreateTenant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenant", reflect.TypeOf((*MockTenantOperator)(nil).CreateTenant), arg0)
}

// CreateTenantUser mocks base method.
func (m *MockTenantOperator) CreateTenantUser(tenant, username, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTenantUser", tenant, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTenantUser indicates an expected call of CreateTenantUser.
func (mr *MockTenantOperatorMockRecorder) CreateTenantUser(tenant, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTenantUser", reflect.TypeOf((*MockTenantOperator)(nil).CreateTenantUser), tenant, username, password)
}

// ListTenants mocks base method.
func (m *MockTenantOperator) ListTenants() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTenants")
	ret0, _ := ret[0].([]string)
	return ret0
}

// ListTenants indicates an expected call of ListTenants.
func (mr *MockTenantOperatorMockRecorder) ListTenants() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTenants", reflect.TypeOf((*MockTenantOperator)(nil).ListTenants))
}

// RemoveTenant mocks base method.
func (m *MockTenantOperator) RemoveTenant(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTenant", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTenant indicates an expected call of RemoveTenant.
func (mr *MockTenantOperatorMockRecorder) RemoveTenant(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTenant", reflect.TypeOf((*MockTenantOperator)(nil).RemoveTenant), arg0)
}

// Subscribe mocks base method.
func (m *MockTenantOperator) Subscribe(ctx context.Context, c config.EventCallback) context.CancelFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, c)
	ret0, _ := ret[0].(context.CancelFunc)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockTenantOperatorMockRecorder) Subscribe(ctx, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockTenantOperator)(nil).Subscribe), ctx, c)
}

// MockCenter is a mock of Center interface.
type MockCenter struct {
	ctrl     *gomock.Controller
	recorder *MockCenterMockRecorder
}

// MockCenterMockRecorder is the mock recorder for MockCenter.
type MockCenterMockRecorder struct {
	mock *MockCenter
}

// NewMockCenter creates a new mock instance.
func NewMockCenter(ctrl *gomock.Controller) *MockCenter {
	mock := &MockCenter{ctrl: ctrl}
	mock.recorder = &MockCenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCenter) EXPECT() *MockCenterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCenter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCenterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCenter)(nil).Close))
}

// Import mocks base method.
func (m *MockCenter) Import(ctx context.Context, cfg *config.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockCenterMockRecorder) Import(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockCenter)(nil).Import), ctx, cfg)
}

// Load mocks base method.
func (m *MockCenter) Load(ctx context.Context, item config.ConfigItem) (*config.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, item)
	ret0, _ := ret[0].(*config.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockCenterMockRecorder) Load(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockCenter)(nil).Load), ctx, item)
}

// LoadAll mocks base method.
func (m *MockCenter) LoadAll(ctx context.Context) (*config.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", ctx)
	ret0, _ := ret[0].(*config.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockCenterMockRecorder) LoadAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockCenter)(nil).LoadAll), ctx)
}

// Subscribe mocks base method.
func (m *MockCenter) Subscribe(ctx context.Context, et config.EventType, c config.EventCallback) (context.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, et, c)
	ret0, _ := ret[0].(context.CancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCenterMockRecorder) Subscribe(ctx, et, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCenter)(nil).Subscribe), ctx, et, c)
}

// Tenant mocks base method.
func (m *MockCenter) Tenant() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tenant")
	ret0, _ := ret[0].(string)
	return ret0
}

// Tenant indicates an expected call of Tenant.
func (mr *MockCenterMockRecorder) Tenant() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tenant", reflect.TypeOf((*MockCenter)(nil).Tenant))
}

// Write mocks base method.
func (m *MockCenter) Write(ctx context.Context, item config.ConfigItem, cfg *config.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, item, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockCenterMockRecorder) Write(ctx, item, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockCenter)(nil).Write), ctx, item, cfg)
}

// MockConfigReader is a mock of ConfigReader interface.
type MockConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockConfigReaderMockRecorder
}

// MockConfigReaderMockRecorder is the mock recorder for MockConfigReader.
type MockConfigReaderMockRecorder struct {
	mock *MockConfigReader
}

// NewMockConfigReader creates a new mock instance.
func NewMockConfigReader(ctrl *gomock.Controller) *MockConfigReader {
	mock := &MockConfigReader{ctrl: ctrl}
	mock.recorder = &MockConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigReader) EXPECT() *MockConfigReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConfigReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConfigReaderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigReader)(nil).Close))
}

// Load mocks base method.
func (m *MockConfigReader) Load(ctx context.Context, item config.ConfigItem) (*config.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, item)
	ret0, _ := ret[0].(*config.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockConfigReaderMockRecorder) Load(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockConfigReader)(nil).Load), ctx, item)
}

// LoadAll mocks base method.
func (m *MockConfigReader) LoadAll(ctx context.Context) (*config.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadAll", ctx)
	ret0, _ := ret[0].(*config.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadAll indicates an expected call of LoadAll.
func (mr *MockConfigReaderMockRecorder) LoadAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadAll", reflect.TypeOf((*MockConfigReader)(nil).LoadAll), ctx)
}

// MockConfigWriter is a mock of ConfigWriter interface.
type MockConfigWriter struct {
	ctrl     *gomock.Controller
	recorder *MockConfigWriterMockRecorder
}

// MockConfigWriterMockRecorder is the mock recorder for MockConfigWriter.
type MockConfigWriterMockRecorder struct {
	mock *MockConfigWriter
}

// NewMockConfigWriter creates a new mock instance.
func NewMockConfigWriter(ctrl *gomock.Controller) *MockConfigWriter {
	mock := &MockConfigWriter{ctrl: ctrl}
	mock.recorder = &MockConfigWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigWriter) EXPECT() *MockConfigWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConfigWriter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConfigWriterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigWriter)(nil).Close))
}

// Import mocks base method.
func (m *MockConfigWriter) Import(ctx context.Context, cfg *config.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Import indicates an expected call of Import.
func (mr *MockConfigWriterMockRecorder) Import(ctx, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockConfigWriter)(nil).Import), ctx, cfg)
}

// Write mocks base method.
func (m *MockConfigWriter) Write(ctx context.Context, item config.ConfigItem, cfg *config.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, item, cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockConfigWriterMockRecorder) Write(ctx, item, cfg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConfigWriter)(nil).Write), ctx, item, cfg)
}

// MockConfigWatcher is a mock of ConfigWatcher interface.
type MockConfigWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockConfigWatcherMockRecorder
}

// MockConfigWatcherMockRecorder is the mock recorder for MockConfigWatcher.
type MockConfigWatcherMockRecorder struct {
	mock *MockConfigWatcher
}

// NewMockConfigWatcher creates a new mock instance.
func NewMockConfigWatcher(ctrl *gomock.Controller) *MockConfigWatcher {
	mock := &MockConfigWatcher{ctrl: ctrl}
	mock.recorder = &MockConfigWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigWatcher) EXPECT() *MockConfigWatcherMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConfigWatcher) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConfigWatcherMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigWatcher)(nil).Close))
}

// Subscribe mocks base method.
func (m *MockConfigWatcher) Subscribe(ctx context.Context, et config.EventType, c config.EventCallback) (context.CancelFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx, et, c)
	ret0, _ := ret[0].(context.CancelFunc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockConfigWatcherMockRecorder) Subscribe(ctx, et, c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockConfigWatcher)(nil).Subscribe), ctx, et, c)
}

// MockStoreOperator is a mock of StoreOperator interface.
type MockStoreOperator struct {
	ctrl     *gomock.Controller
	recorder *MockStoreOperatorMockRecorder
}

// MockStoreOperatorMockRecorder is the mock recorder for MockStoreOperator.
type MockStoreOperatorMockRecorder struct {
	mock *MockStoreOperator
}

// NewMockStoreOperator creates a new mock instance.
func NewMockStoreOperator(ctrl *gomock.Controller) *MockStoreOperator {
	mock := &MockStoreOperator{ctrl: ctrl}
	mock.recorder = &MockStoreOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoreOperator) EXPECT() *MockStoreOperatorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStoreOperator) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreOperatorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStoreOperator)(nil).Close))
}

// Get mocks base method.
func (m *MockStoreOperator) Get(key config.PathKey) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoreOperatorMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStoreOperator)(nil).Get), key)
}

// Init mocks base method.
func (m *MockStoreOperator) Init(options map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", options)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockStoreOperatorMockRecorder) Init(options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockStoreOperator)(nil).Init), options)
}

// Name mocks base method.
func (m *MockStoreOperator) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStoreOperatorMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStoreOperator)(nil).Name))
}

// Save mocks base method.
func (m *MockStoreOperator) Save(key config.PathKey, val []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStoreOperatorMockRecorder) Save(key, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStoreOperator)(nil).Save), key, val)
}

// Watch mocks base method.
func (m *MockStoreOperator) Watch(key config.PathKey) (<-chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", key)
	ret0, _ := ret[0].(<-chan []byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockStoreOperatorMockRecorder) Watch(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockStoreOperator)(nil).Watch), key)
}
